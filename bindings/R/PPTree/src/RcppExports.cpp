// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// train
template<typename T, typename R> Tree<T, R> train(stats::Data<T> data, stats::DataColumn<R> groups, pp::PPStrategy<T, R> pp_strategy);
RcppExport SEXP _PPTree_train(SEXP dataSEXP, SEXP groupsSEXP, SEXP pp_strategySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< stats::Data<T> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< stats::DataColumn<R> >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< pp::PPStrategy<T, R> >::type pp_strategy(pp_strategySEXP);
    rcpp_result_gen = Rcpp::wrap(train(data, groups, pp_strategy));
    return rcpp_result_gen;
END_RCPP
}
// predict
template<typename T, typename R> R predict(stats::Data<T> data, Tree<T, R> tree);
RcppExport SEXP _PPTree_predict(SEXP dataSEXP, SEXP treeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< stats::Data<T> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Tree<T, R> >::type tree(treeSEXP);
    rcpp_result_gen = Rcpp::wrap(predict(data, tree));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PPTree_train", (DL_FUNC) &_PPTree_train, 3},
    {"_PPTree_predict", (DL_FUNC) &_PPTree_predict, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_PPTree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
