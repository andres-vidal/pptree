% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PPForest.R
\name{PPForest}
\alias{PPForest}
\title{Trains a Random Forest of Project-Pursuit oblique decision trees.}
\usage{
PPForest(
  formula = NULL,
  data = NULL,
  x = NULL,
  y = NULL,
  size = 2,
  lambda = 0,
  n_vars = NULL,
  n_threads = NULL
)
}
\arguments{
\item{formula}{A formula of the form \code{y ~ x1 + x2 + ...}, where \code{y} is a vector of labels and \code{x1}, \code{x2}, ... are the features.}

\item{data}{A data frame containing the variables in the formula.}

\item{x}{A matrix containing the features for each observation.}

\item{y}{A matrix containing the labels for each observation.}

\item{size}{The number of trees in the forest.}

\item{lambda}{A regularization parameter. If \code{lambda = 0}, the model is trained using Linear Discriminant Analysis (LDA). If \code{lambda > 0}, the model is trained using Penalized Discriminant Analysis (PDA).}

\item{n_vars}{The number of variables to consider at each split. These are chosen uniformly in each split. The default is all variables.}

\item{n_threads}{The number of threads to use. The default is the number of cores available.}
}
\value{
A PPForest model trained on \code{x} and \code{y}.
}
\description{
This function trains a Random Forest of Project-Pursuit oblique decision tree (PPTree) using either a formula and data frame interface or a matrix-based interface. When using the formula interface, specify the model formula and the data frame containing the variables. For the matrix-based interface, provide matrices for the features and labels directly.
The number of trees is controlled by the \code{size} parameter. Each tree is trained on a stratified bootstrap sample drawn from the data.
The number of variables to consider at each split is controlled by the \code{n_vars} parameter.
If \code{lambda = 0}, the model is trained using Linear Discriminant Analysis (LDA). If \code{lambda > 0}, the model is trained using Penalized Discriminant Analysis (PDA).
}
\examples{

# Example 1: formula interface with the `iris` dataset
PPForest(Type ~ ., data = iris)

# Example 2: formula interface with the `iris` dataset with regularization
PPForest(Type ~ ., data = iris, lambda = 0.5)

# Example 3: matrix interface with the `iris` dataset
PPForest(x = iris[, 1:4], y = iris[, 5])

# Example 4: matrix interface with the `iris` dataset with regularization
PPForest(x = iris[, 1:4], y = iris[, 5], lambda = 0.5)

# Example 5: formula interface with the `crabs` dataset
PPForest(Type ~ . - sex + as.numeric(as.factor(sex)), data = crabs)

# Example 6: formula interface with the `crabs` dataset with regularization
PPForest(Type ~ . - sex + as.numeric(as.factor(sex)), data = crabs, lambda = 0.5)

# Example 7: matrix interface with the `crabs` dataset
x <- crabs[, 2:5]
x$sex <- as.numeric(as.factor(crabs$sex))
PPForest(x = x, y = crabs$Type)

# Example 8: matrix interface with the `crabs` dataset with regulartion
x <- crabs[, 2:5]
x$sex <- as.numeric(as.factor(crabs$sex))
PPForest(x = x, y = crabs$Type, lambda = 0.5)

}
